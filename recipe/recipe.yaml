schema_version: 1

context:
  name: sqlmodel
  version: "0.0.26"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://pypi.org/packages/source/${{ name[0] }}/${{ name }}/sqlmodel-${{ version }}.tar.gz
  sha256: 698f30782f85fe0a47e375bef666f827a7b19b5ed5210a8e84e3d3e8c57c27b8

build:
  number: 0
  noarch: python
  script: ${{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation

requirements:
  host:
    - python ${{ python_min }}.*
    - pdm-backend
    - pip
  run:
    - python >=${{ python_min }}
    - sqlalchemy >=2.0.14,<2.1.0
    - pydantic >=1.10.13,<3.0.0

tests:
  - python:
      imports:
        - sqlmodel
      pip_check: true
      python_version: ${{ python_min }}.*
  - requirements:
      run:
        - python ${{ python_min }}.*
    script:
      # Extract the version of the built package
      - VERSION=$(python -c 'from importlib import metadata; print(metadata.version("sqlmodel"))')
      - echo "sqlmodel version $VERSION"
      # Ensure that version is not 0. (This conditional looks redundant, but YAML thinks
      # that [...] denotes a list.)
      - if [ "0" == "$VERSION" ]; then false; fi

about:
  summary: SQL databases in Python, designed for simplicity, compatibility, and robustness.
  license: MIT
  license_file: LICENSE
  description: |
    SQLModel is designed to simplify interacting with SQL databases in FastAPI
    applications, it was created by the same author. It combines SQLAlchemy
    and Pydantic and tries to simplify the code you write as much as possible,
    allowing you to reduce the code duplication to a minimum, but while getting
    the best developer experience possible. SQLModel is, in fact, a thin layer
    on top of Pydantic and SQLAlchemy, carefully designed to be compatible with
    both.


  homepage: https://github.com/tiangolo/sqlmodel
  documentation: https://sqlmodel.tiangolo.com/

extra:
  recipe-maintainers:
    - tiangolo
    - maresb
    - thewchan
